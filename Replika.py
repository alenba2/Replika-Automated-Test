# Generated by Selenium IDE
from pyexpat.errors import messages

import pytest
import time
import json
from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import csv

from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize

intMem_1 = []
intMem_2 = []
intKey1 = []
intKey2 = []

testCase_1 = []
testCase_2 = []
testCase_3 = []
testCase_4 = []

#YOUR EMAIL AND PASSWORD GO HERE
email = ""
password = ""

class TestTest1():
    def setup_method(self, method):
        self.driver = webdriver.Chrome(executable_path=ChromeDriverManager().install())
        self.vars = {}


    def teardown_method(self, method):
        self.driver.quit()

    def getMessages(self, heading1):

        messages = []

        for x in heading1:
            try:
                heading2 = x.find_element(By.TAG_NAME, 'span')
                message = heading2.get_attribute('innerHTML')
                messages.append(message)
            except:
                pass

        return messages

    def getSimilarity(self, response, keyword):

        response = response.lower()
        keyword = keyword.lower()

        x = word_tokenize(response)
        y = word_tokenize(keyword)

        sw = stopwords.words('english')
        l1 = []
        l2 = []

        X_set = {w for w in x if not w in sw}
        Y_set = {w for w in y if not w in sw}

        rvector = X_set.union(Y_set)
        for w in rvector:
            if w in X_set:
                l1.append(1)  # create a vector
            else:
                l1.append(0)
            if w in Y_set:
                l2.append(1)
            else:
                l2.append(0)
        c = 0

        # cosine formula
        for i in range(len(rvector)):
            c += l1[i] * l2[i]

        try:
            cosine = c / float((sum(l1) * sum(l2)) ** 0.5)
        except:
            cosine = 0
        return cosine

    # TEST #1 Intelligent Memory
    def test_test1(self):

        with open('Text1.txt') as txt_file:
            intMem_1 = txt_file.read().splitlines()

        with open('intKeyword1.txt') as txt_key1:
            intKey1 = txt_key1.read().splitlines()

        self.driver.get("https://my.replika.com/login")
        self.driver.set_window_size(1200, 900)
        self.driver.find_element(By.ID, "emailOrPhone").send_keys(email)
        self.driver.find_element(By.ID, "emailOrPhone").send_keys(Keys.ENTER)
        time.sleep(1)
        self.driver.find_element(By.ID, "login-password").send_keys(password)
        self.driver.find_element(By.CSS_SELECTOR, ".SolidButton-k70ct8-0").click()
        time.sleep(5)

        self.driver.execute_script("window.scrollTo(0,0)")

        for x in intMem_1:
            self.driver.find_element(By.ID, "send-message-textarea").send_keys(x)
            self.driver.find_element(By.ID, "send-message-textarea").send_keys(Keys.ENTER)
            time.sleep(8)

        # important for conversation data
        heading1 = self.driver.find_elements(By.XPATH, '//*[contains(@id, "-text")]')

        # Grabs all conversation. User and Bot
        messageList = self.getMessages(heading1)

        self.driver.find_element(By.ID, "send-message-textarea").send_keys('.')
        self.driver.find_element(By.ID, "send-message-textarea").send_keys(Keys.ENTER)
        time.sleep(8)

        self.driver.find_element(By.ID, "send-message-textarea").send_keys('.')
        self.driver.find_element(By.ID, "send-message-textarea").send_keys(Keys.ENTER)
        time.sleep(10)

        count = 0

        for x in intMem_1:
            index = messageList.index(x)
            response = messageList[index+1]
            percent = self.getSimilarity(response, intKey1[count])
            testCase_1.append(percent)
            count = count + 1

    # Test #2 Question and Answer

    def test_test2(self):

        with open('QA1.txt') as txt_file:
            intMem_1 = txt_file.read().splitlines()

        with open('QAKey.txt') as txt_key1:
            intKey1 = txt_key1.read().splitlines()

        self.driver.get("https://my.replika.com/login")
        self.driver.set_window_size(1200, 900)
        self.driver.find_element(By.ID, "emailOrPhone").send_keys(email)
        self.driver.find_element(By.ID, "emailOrPhone").send_keys(Keys.ENTER)
        time.sleep(1)
        self.driver.find_element(By.ID, "login-password").send_keys(password)
        self.driver.find_element(By.CSS_SELECTOR, ".SolidButton-k70ct8-0").click()
        time.sleep(7)

        self.driver.execute_script("window.scrollTo(0,0)")

        for x in intMem_1:
            self.driver.find_element(By.ID, "send-message-textarea").send_keys(x)
            self.driver.find_element(By.ID, "send-message-textarea").send_keys(Keys.ENTER)
            time.sleep(10)

        # important for conversation data
        heading1 = self.driver.find_elements(By.XPATH, '//*[contains(@id, "-text")]')

        # Grabs all conversation. User and Bot
        messageList = self.getMessages(heading1)

        count = 0

        for x in intMem_1:
            index = messageList.index(x)
            response = messageList[index+1]
            percent = self.getSimilarity(response, intKey1[count])
            testCase_2.append(percent)
            count = count + 1

    # Test #3 Respond Conversations
    def test_test3(self):

        with open('RC.txt') as txt_file:
            intMem_1 = txt_file.read().splitlines()

        with open('KeyRc.txt') as txt_key1:
            intKey1 = txt_key1.read().splitlines()

        self.driver.get("https://my.replika.com/login")
        self.driver.set_window_size(1200, 900)
        self.driver.find_element(By.ID, "emailOrPhone").send_keys(email)
        self.driver.find_element(By.ID, "emailOrPhone").send_keys(Keys.ENTER)
        time.sleep(1)
        self.driver.find_element(By.ID, "login-password").send_keys(password)
        self.driver.find_element(By.CSS_SELECTOR, ".SolidButton-k70ct8-0").click()
        time.sleep(5)

        self.driver.execute_script("window.scrollTo(0,0)")

        for x in intMem_1:
            self.driver.find_element(By.ID, "send-message-textarea").send_keys(x)
            self.driver.find_element(By.ID, "send-message-textarea").send_keys(Keys.ENTER)
            time.sleep(8)

        # important for conversation data
        heading1 = self.driver.find_elements(By.XPATH, '//*[contains(@id, "-text")]')

        # Grabs all conversation. User and Bot
        messageList = self.getMessages(heading1)

        count = 0

        for x in intMem_1:
            index = messageList.index(x)
            response = messageList[index+1]
            percent = self.getSimilarity(response, intKey1[count])
            testCase_3.append(percent)
            count = count + 1

    def test_test4(self):

        with open('Luke.txt') as txt_file:
            intMem_1 = txt_file.read().splitlines()

        with open('LukeKey.txt') as txt_key1:
            intKey1 = txt_key1.read().splitlines()

        self.driver.get("https://my.replika.com/login")
        self.driver.set_window_size(1200, 900)
        self.driver.find_element(By.ID, "emailOrPhone").send_keys(email)
        self.driver.find_element(By.ID, "emailOrPhone").send_keys(Keys.ENTER)
        time.sleep(1)
        self.driver.find_element(By.ID, "login-password").send_keys(password)
        self.driver.find_element(By.CSS_SELECTOR, ".SolidButton-k70ct8-0").click()
        time.sleep(5)

        self.driver.execute_script("window.scrollTo(0,0)")

        for x in intMem_1:
            self.driver.find_element(By.ID, "send-message-textarea").send_keys(x)
            self.driver.find_element(By.ID, "send-message-textarea").send_keys(Keys.ENTER)
            time.sleep(8)

        # important for conversation data
        heading1 = self.driver.find_elements(By.XPATH, '//*[contains(@id, "-text")]')

        # Grabs all conversation. User and Bot
        messageList = self.getMessages(heading1)

        count = 0

        for x in intMem_1:
            index = messageList.index(x)
            response = messageList[index+1]
            percent = self.getSimilarity(response, intKey1[count])
            testCase_4.append(percent)
            count = count + 1

    def test_test5(self):
        passing = .1

        test1 = 0
        test2 = 0
        test3 = 0
        test4 = 0

        for x in testCase_1:
            if x > passing:
                test1 = test1 + 1

        for x in testCase_2:
            if x > passing:
                test2 = test2 + 1

        for x in testCase_3:
            if x > passing:
                test3 = test3 + 1

        for x in testCase_4:
            if x > passing:
                test4 = test4 + 1

        print("\nIntelligent Memory Passed " + str(test1) + " out of " + str(len(testCase_1)))
        print("Conversation Flow Passed " + str(test2) + " out of " + str(len(testCase_2)))
        print("Question and Answer Passed " + str(test3) + " out of " + str(len(testCase_3)))
        print("Domain / Service Passed " + str(test4) + " out of " + str(len(testCase_4)))